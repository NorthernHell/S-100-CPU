# $Id: Makefile 129 2009-07-09 14:40:56Z anthony $

#global definition
include ../makdefs

DRVSET=../Cmds/drvset.txt

ifeq ($(OS),ACE_QNX4)
DIRS= $(shell ls -D -1| grep -v "\.")
else 
ifeq ($(OS),ACE_QNX6)
DIRS= $(shell ls -D -1| grep -v "\.")
else
DIRS = $(shell ls -p | grep /| tr -d '/')
endif
endif

exceptions = $(shell cat exceptions| grep -v \^\#)

FILTERED_DIRS = $(filter-out $(exceptions),$(DIRS))
AR_NAMES = $(patsubst %, ../Lib/lib%.a,$(FILTERED_DIRS))

.PHONY : all force_look clean clean_all drivers

ifeq ($(FILTERED_DIRS),)
all: check_drivers Drivers.h libdefs drivers.tdb $(DRVSET)
else
all: check_drivers Drivers.h libdefs drivers.tdb $(DRVSET) drivers
endif
	echo $(FILTERED_DIRS)

ifeq ($(FILTERED_DIRS),)
drivers: 
else
drivers: $(AR_NAMES)
endif

#Drivers.h: Makefile exceptions $(shell echo $(FILTERED_DIRS) | tr ' ' '\012'| sed -e 's:.*:&/pack_&.h:' | tr '\012' ' ') 
Drivers.h: force_look
#creates empty ISA_DECALRE_DRIVERS if no drivers are included, as it should be
	echo >  Drivers.h
	for drv in $(FILTERED_DIRS); do echo \#include \"$$drv/pack_$${drv}.h\" >> Drivers.h; done
	echo -n "#define ISA_DECLARE_DRIVERS " >> Drivers.h
	for drv in $(shell echo $(FILTERED_DIRS) | tr '[a-z]' '[A-Z]'); do echo -n "ISA_DECLARE_PACK_$${drv} " >> Drivers.h; done
	echo >> Drivers.h

#libdefs: Makefile exceptions $(shell ls $(addsuffix /libdefs.inc, $(FILTERED_DIRS)) 2>/dev/null)
libdefs: force_look
#creates empty DRVLIB variable in libdefs if no drivers are included
	echo > libdefs
	for drv in $(FILTERED_DIRS); \
	    do if [ -f ../Drivers/$${drv}/libdefs.inc ]; \
		then echo "include ../Drivers/$${drv}/libdefs.inc" >> libdefs; \
		else true; \
	     fi ; \
	done
	echo -n "DRVLIB=" >> libdefs
	for drv in $(FILTERED_DIRS); do echo -n "\$$(LDIR)/lib$${drv}.a " >> libdefs; done

#drivers.tdb: Makefile exceptions $(shell echo $(FILTERED_DIRS) | tr ' ' '\012'| sed -e 's:.*:&/&.tdb:' | tr '\012' ' ') 
drivers.tdb: force_look
	echo > drivers.tdb
	for drv in $(FILTERED_DIRS); do cat $${drv}/$${drv}.tdb >> drivers.tdb; done

define create_rule
$(patsubst %,../Lib/lib%.a,$(1)): force_look
	if [ -f $(1)/Makefile ]; then make -C $(1); else true; fi
endef
     
$(foreach driverdir,$(FILTERED_DIRS),$(eval $(call create_rule,$(driverdir))))

force_look:
	true

$(DRVSET): force_look
	echo > $(DRVSET)
	echo "This ISaGRAF Target contains the following functional extensions:" > $(DRVSET)
	for drv in $(FILTERED_DIRS); do \
	  if [ -s $${drv}/$${drv}.tdb ]; then \
	    echo -n "$${drv}: " >> $(DRVSET); \
	    if [ -f $${drv}/description.txt ]; then \
		  cat $${drv}/description.txt >> $(DRVSET); \
	    else \
	      echo >> $(DRVSET); \
	    fi; \
	  fi; \
	done
	
iodk:
	-for drv in $(FILTERED_DIRS); do (mkdir $(DESTDIR)/$$drv; cd $$drv; make iodk DRVDIR=$(DESTDIR)/$$drv); done
	mkdir $(DESTDIR)/cjiosmpl
	mkdir $(DESTDIR)/cjcsmpl
	cp cjiosmpl/* $(DESTDIR)/cjiosmpl/
	cp cjcsmpl/* $(DESTDIR)/cjcsmpl/

clean:
	-for drv in $(FILTERED_DIRS); do (cd $$drv; make clean); done
	rm -f Drivers.h
	rm -f libdefs
	rm -f drivers.tdb

clean_all:
	-for drv in $(DIRS); do (cd $$drv; make clean); done
	rm -f Drivers.h
	rm -f libdefs
	rm -f drivers.tdb
	rm -f update_drivers
	rm -f $(DRVSET)

check_drivers:
	./check_drivers.sh $(FILTERED_DIRS)
	
update_drivers: 
	touch update_drivers

